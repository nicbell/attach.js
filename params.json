{"name":"Attach.js","tagline":"Attaches JavaScript to HTML without messy selectors. Also takes care out reattaching JavaScript to HTML when HTML is dynamically injected (ie. via AJAX) ","body":"#attach.js\r\nAttaches JavaScript to HTML without messy selectors. Also takes care of reattaching JavaScript to HTML when HTML is dynamically injected (ie. via AJAX). I have written attach.js in pure JavaScript but in the examples I have shown how to use it with jQuery.\r\n\r\n##The problem\r\nEver thought CSS selectors in your JavaScript were messy or wanted to reatttach JavaScript to the DOM after content was dynamically loaded.\r\n```html\r\n<div class=\"someSelector\">..</div>\r\n<div class=\"anotherSelector\">..</div>\r\n```\r\n```javascript\r\n$(document).ready(function(){\r\n  $('.someSelector').pluginName();\r\n  //or\r\n  var x = new SomeThing($('.anotherSelector'));\r\n});\r\n```\r\nPretty messy and what if the class name changes? \r\n\r\n##Example\r\n```html\r\n<div class=\"someSelector\" data-attach=\"pluginName\">..</div>\r\n<div class=\"anotherSelector\" data-attach=\"SomeThing\">..</div>\r\n```\r\n```javascript\r\nAttach.add('pluginName',function(ele){\r\n  $(ele).pluginName();\r\n});\r\nAttach.add('SomeThing',function(ele){\r\n   new SomeThing($(ele));\r\n});\r\n\r\n$(document).ready(function(){\r\n  Attach.run();\r\n});\r\n```\r\n\r\n##Usage\r\n\r\n##API\r\n\r\n##More detailed examples (coming soon, sleep now):\r\n* Attaching multiple plugins and classes to a single element.\r\n* Attaching plugins and classes with parameters.\r\n* Storing instance references.\r\n* Reattaching after a DOM update.\r\n* Advanced Mootools example.\r\n\r\n--\r\nThis project was inspired by ClientCide's Behavior project and DOM instantiation in Twitter Bootstrap.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}